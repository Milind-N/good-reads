{"version":3,"sources":["components/SearchResult.js","components/Results.js","components/Search.js","components/AuthorInfo.js","components/BookInfo.js","App.js","serviceWorker.js","index.js"],"names":["SearchResult","_ref","books","expandBook","bookTitle","best_book","title","displayTitle","split","slice","join","length","react_default","a","createElement","className","src","image_url","alt","height","onClick","data-toggle","data-placement","includes","author","name","Results","map","book","components_SearchResult","key","id","apiKey","Search","state","searchText","error","fetchingData","onTextChange","e","_this","setState","target","value","onButtonClick","requestUri","concat","Axios","get","then","res","parseXMLResponse","data","catch","toString","response","XMLResponse","DOMParser","parseFromString","getElementsByTagName","searchResults","Object","construct","Array","toConsumableArray","result","XMLToJson","console","log","props","setResults","XML","allNodes","children","jsonResult","forEach","node","nodeName","innerHTML","type","placeholder","onChange","this","components_Results","results","Component","AuthorInfo","authors","index","href","link","role","BookInfo","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","getDescription","bookId","parser","description","replace","XMLresults","XMLResponseNew","width","components_AuthorInfo","average_rating","dangerouslySetInnerHTML","__html","original_publication_day","original_publication_month","original_publication_year","collapseBook","App","expandedBook","components_BookInfo","components_Search","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qSA4CeA,EAzCM,SAAAC,GAA0B,IAAvBC,EAAuBD,EAAvBC,MAAOC,EAAgBF,EAAhBE,WACvBC,EAAYF,EAAMG,UAAUC,MAC9BC,EAAeH,EAClBI,MAAM,KACNC,MAAM,EAAG,GACTC,KAAK,KAKN,OAJIN,EAAUO,OAASJ,EAAaI,SAClCJ,GAAgB,OAIhBK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mCACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,OACEC,UAAU,eACVC,IAAKd,EAAMG,UAAUY,UACrBC,IAAI,aACJC,OAAO,QACPC,QAAS,kBAAMjB,EAAWD,MAE5BU,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BACXH,EAAAC,EAAAC,cAAA,MACIC,UAAU,aACVM,cAAY,UACZC,iBAAe,SACfhB,MAAOC,EAAagB,SAAS,OAASnB,EAAY,IAEjDG,GAELK,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAcb,EAAMG,UAAUmB,OAAOC,UCLhDC,EAvBC,SAAAzB,GAA2B,IAAxBC,EAAwBD,EAAxBC,MAAOC,EAAiBF,EAAjBE,WAExB,OACES,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXb,EAAMS,OAAS,EAAMC,EAAAC,EAAAC,cAAA,4BAAoBZ,EAAMS,OAA1B,2BAA+D,IAExFC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACZb,EAAMyB,IAAI,SAAAC,GAAI,OACbhB,EAAAC,EAAAC,cAACe,EAAD,CAAc3B,MAAO0B,EAAME,IAAKF,EAAKG,GAAI5B,WAAYA,SCRzD6B,EAAS,uBAwHAC,6MArHbC,MAAQ,CACNC,WAAY,GACZC,MAAO,GACPC,cAAc,KAGhBC,aAAe,SAAAC,GACbC,EAAKC,SAAS,CACZN,WAAYI,EAAEG,OAAOC,WAIzBC,cAAgB,WACdJ,EAAKC,SAAS,CACZJ,cAAc,IAFI,IAKZF,EAAeK,EAAKN,MAApBC,WACFU,EAAU,gGAAAC,OAAmGd,EAAnG,OAAAc,OAA+GX,GAE/HY,IAAMC,IAAIH,GACJI,KAAK,SAAAC,GACJV,EAAKW,iBAAiBD,EAAIE,QAE3BC,MAAM,SAAAjB,GACLI,EAAKC,SAAS,CACZL,MAAOA,EAAMkB,WACbjB,cAAc,SAMzBc,iBAAmB,SAAAI,GACjB,IACMC,GADS,IAAIC,WACQC,gBAAgBH,EAAU,mBAGrD,GAFmBC,EAAYG,qBAAqB,eAErChD,OACb6B,EAAKC,SAAS,CACZL,MAAO,6CACPC,cAAc,QAGb,CACH,IAEMuB,EAFUC,OAAAC,EAAA,EAAAD,CAAOE,MAAPF,OAAAG,EAAA,EAAAH,CAAgBL,EAAYG,qBAAqB,UAEhChC,IAAI,SAAAsC,GAAM,OAAIzB,EAAK0B,UAAUD,KAC9DE,QAAQC,IAAIR,GAEZpB,EAAKC,SAAS,CACZJ,cAAc,GAEd,WACEG,EAAK6B,MAAMC,WAAWV,SAM9BM,UAAY,SAAAK,GACV,IAAMC,EAAQX,OAAAC,EAAA,EAAAD,CAAOE,MAAPF,OAAAG,EAAA,EAAAH,CAAgBU,EAAIE,WAC5BC,EAAa,GASnB,OARAF,EAASG,QAAQ,SAAAC,GACXA,EAAKH,SAAS9D,OAChB+D,EAAWE,EAAKC,UAAYrC,EAAK0B,UAAUU,GAG3CF,EAAWE,EAAKC,UAAYD,EAAKE,YAG9BJ,2EAIP,OACE9D,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,SACEC,UAAU,6BACVgE,KAAK,OACLC,YAAY,kCACZvD,KAAK,aACLwD,SAAUC,KAAK5C,aACfK,MAAOuC,KAAKhD,MAAMC,aAEpBvB,EAAAC,EAAAC,cAAA,UACEC,UAAU,2BACVK,QAAS8D,KAAKtC,eAFhB,WAQDsC,KAAKhD,MAAMG,aACVzB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,oBAAoB,cAEhCmE,KAAKhD,MAAME,OACVxB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAemE,KAAKhD,MAAME,QAEvCxB,EAAAC,EAAAC,cAACqE,EAAD,CACEjF,MAAOgF,KAAKb,MAAMe,QAClBjF,WAAY+E,KAAKb,MAAMlE,qBAvGhBkF,aCkBNC,EAtBI,SAAArF,GAAiB,IAAdsF,EAActF,EAAdsF,QACpB,OACE3E,EAAAC,EAAAC,cAAA,eACI,IACCyE,EAAQ5D,IAAI,SAACH,EAAQgE,GAAT,OACX5E,EAAAC,EAAAC,cAAA,QAAMgB,IAAMN,EAAOO,GAAKhB,UAAU,oBAC/ByE,EAAQ,KAAO,GAChB5E,EAAAC,EAAAC,cAAA,KAAG2E,KAAMjE,EAAOkE,MACblE,EAAOC,MAETD,EAAOmE,KAAP,IAAA7C,OAAkBtB,EAAOmE,KAAzB,KAAmC,QCR1C3D,EAAS,uBAuHA4D,cApHb,SAAAA,EAAYvB,GAAO,IAAA7B,EAAA,OAAAqB,OAAAgC,EAAA,EAAAhC,CAAAqB,KAAAU,IACjBpD,EAAAqB,OAAAiC,EAAA,EAAAjC,CAAAqB,KAAArB,OAAAkC,EAAA,EAAAlC,CAAA+B,GAAAI,KAAAd,KAAMb,KAYR4B,eAAiB,WACf,IAAMC,EAAS1D,EAAK6B,MAAMnE,MAAMG,UAAU0B,GACpCc,EAAU,qFAAAC,OAAwFoD,EAAxF,SAAApD,OAAsGd,GAEtHe,IAAMC,IAAIH,GACJI,KAAK,SAAAC,GACJ,IAAMiD,EAAS,IAAI1C,UACbD,EAAc2C,EAAOzC,gBAAgBR,EAAIE,KAAM,mBAGpD,GAFkBI,EAAYG,qBAAqB,eAEpChD,OACb6B,EAAKC,SAAS,CACZL,MAAO,mDAGN,CACH,IAAIgE,EAAc5C,EAAYG,qBAAqB,eAAe,GAAGmB,WACrEsB,EAAcA,EAAYC,QAAQ,YAAa,IAAIA,QAAQ,MAAO,OAGhED,EAAc,yBAEhB5D,EAAKC,SAAS,CAAE2D,gBAEhB,IAAIE,EAAa9C,EAAYG,qBAAqB,WAAW,GAAGmB,UAChEwB,EAAaA,EAAWD,QAAQ,eAAgB,IAAIA,QAAQ,SAAU,IACtEC,EAAU,YAAAxD,OAAewD,EAAf,cACV,IAAMC,EAAiBJ,EAAOzC,gBAAgB4C,EAAY,mBAEpD1C,EADaC,OAAAC,EAAA,EAAAD,CAAOE,MAAPF,OAAAG,EAAA,EAAAH,CAAgB0C,EAAe5C,qBAAqB,YACnChC,IAAI,SAAAsC,GAAM,OAAIzB,EAAK0B,UAAUD,KACjEE,QAAQC,IAAIR,GAEZpB,EAAKC,SAAS,CAAEmB,qBAGpBP,MAAM,SAAAjB,GACLI,EAAKC,SAAS,CACZL,MAAOA,EAAMkB,gBAlDLd,EAwDnB0B,UAAY,SAAAK,GACV,IAAMC,EAAQX,OAAAC,EAAA,EAAAD,CAAOE,MAAPF,OAAAG,EAAA,EAAAH,CAAgBU,EAAIE,WAC5BC,EAAa,GASnB,OARAF,EAASG,QAAQ,SAAAC,GACXA,EAAKH,SAAS9D,OAChB+D,EAAWE,EAAKC,UAAYrC,EAAK0B,UAAUU,GAG3CF,EAAWE,EAAKC,UAAYD,EAAKE,YAG9BJ,GAjEPlC,EAAKN,MAAQ,CACX0B,cAAe,GACfwC,YAAa,wCACbhE,MAAO,IALQI,mFAUjB0C,KAAKe,kDA4DE,IACC/F,EAAUgF,KAAKb,MAAfnE,MAER,OACEU,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAEbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACbH,EAAAC,EAAAC,cAAA,OACEE,IAAKd,EAAMG,UAAUY,UACrBE,OAAO,QACPqF,MAAM,QACNtF,IAAI,gBAGRN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QAAQb,EAAMG,UAAUC,OAEtCM,EAAAC,EAAAC,cAAC2F,EAAD,CAAYlB,QAASL,KAAKhD,MAAM0B,gBAEhChD,EAAAC,EAAAC,cAAA,yBAAiBZ,EAAMwG,gBAErBxB,KAAKhD,MAAME,OACXxB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAemE,KAAKhD,MAAME,QAEvCxB,EAAAC,EAAAC,cAAA,KAAG6F,wBAAyB,CAAEC,OAAQ1B,KAAKhD,MAAMkE,gBAGrDxF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,2BACkB,IADlB,GAAAgC,OAEM5C,EAAM2G,yBAFZ,KAAA/D,OAEwC5C,EAAM4G,2BAF9C,KAAAhE,OAE4E5C,EAAM6G,2BAFlF,IAEgH,KAEhHnG,EAAAC,EAAAC,cAAA,UAAQC,UAAU,kBAAkBK,QAAS8D,KAAKb,MAAM2C,cACrD,oBAxGU3B,aC6CR4B,6MA9Cb/E,MAAQ,CACNkD,QAAS,GACT8B,aAAc,QAIhB5C,WAAa,SAAAc,GACX5C,EAAKC,SAAS,CAAE2C,eAGlB4B,aAAe,WACbxE,EAAKC,SAAS,CACZyE,aAAc,UAIlB/G,WAAa,SAAA+G,GACX1E,EAAKC,SAAS,CAAEyE,0FAIhB,OACEtG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAd,2BAEFH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAEZmE,KAAKhD,MAAMgF,aACVtG,EAAAC,EAAAC,cAACqG,EAAD,CACEjH,MAAOgF,KAAKhD,MAAMgF,aAClBF,aAAc9B,KAAK8B,eAGrBpG,EAAAC,EAAAC,cAACsG,EAAD,CACEhC,QAASF,KAAKhD,MAAMkD,QACpBd,WAAYY,KAAKZ,WACjBnE,WAAY+E,KAAK/E,sBAtCbkF,aCOEgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/G,EAAAC,EAAAC,cAAC8G,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhF,KAAK,SAAAiF,GACjCA,EAAaC","file":"static/js/main.e58677f1.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst SearchResult = ({ books, expandBook}) => {\n  const bookTitle = books.best_book.title\n  let displayTitle = bookTitle\n  .split(\" \")\n  .slice(0, 4)\n  .join(\" \");\n  if (bookTitle.length > displayTitle.length) {\n    displayTitle += \"...\";\n  }\n\n  return (\n    <div className=\"col-lg-2 col-sm-4 col-md-3 pt-2\">\n      <div className=\"card h-100\">\n        <img\n          className=\"card-img-top\"\n          src={books.best_book.image_url}\n          alt=\"Book cover\"\n          height=\"200px\"\n          onClick={() => expandBook(books)}\n        />\n        <div className=\"card-block  pl-2 pr-2 pt-2\">\n            <h5 \n                className=\"card-title\"\n                data-toggle=\"tooltip\"\n                data-placement=\"bottom\"\n                title={displayTitle.includes(\"...\") ? bookTitle : \"\"}\n            >\n                {displayTitle}\n            </h5>\n            <h6 className=\"text-muted\">{books.best_book.author.name}</h6>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nSearchResult.propTypes = {\n  books: PropTypes.object,\n  expandBook: PropTypes.func\n}\n\nexport default SearchResult\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport SearchResult from './SearchResult'\n\nconst Results = ({ books, expandBook }) => {\n\n  return (\n    <div>\n      <div className=\"row\">\n        {(books.length > 0 ) ? <p>PAGE 1 OF ABOUT {books.length} RESULTS (0.18 SECONDS)</p> : \"\"}\n      </div>\n      <div className=\"row\">\n        {books.map(book => (\n          <SearchResult books={book} key={book.id} expandBook={expandBook} />\n        ))\n        }\n      </div>\n    </div>\n\n  )\n}\n\nResults.propTypes = {\n  books: PropTypes.array,\n  expandBook: PropTypes.func\n}\n\nexport default Results\n","import React, { Component } from 'react'\nimport Axios from 'axios'\nimport Results from './Results'\nimport PropTypes from 'prop-types'\n\nconst apiKey = 'ynuEDG9y5v4bh1ADHBHw'\n\nclass Search extends Component {\n  state = {\n    searchText: '',\n    error: '',\n    fetchingData: false,\n  }\n\n  onTextChange = e => {\n    this.setState({\n      searchText: e.target.value\n    })\n  }\n\n  onButtonClick = () => {\n    this.setState({\n      fetchingData: true\n    })\n\n    const { searchText } = this.state\n    const requestUri = `https://mysterious-waters-52302.herokuapp.com/https://www.goodreads.com/search/index.xml?key=${apiKey}&q=${searchText}`\n\n    Axios.get(requestUri)\n         .then(res => {\n           this.parseXMLResponse(res.data)\n         })\n         .catch(error => {\n           this.setState({\n             error: error.toString(),\n             fetchingData: false,\n           })\n         })\n  }\n\n  // parse the xml data received in the response of goodreads api\n  parseXMLResponse = response => {\n    const parser = new DOMParser()\n    const XMLResponse = parser.parseFromString(response, 'application/xml')\n    const parseError = XMLResponse.getElementsByTagName('parsererror')\n\n    if (parseError.length)  {\n      this.setState({\n        error: 'An error occurred while fetching the data.',\n        fetchingData: false\n      })\n    }\n    else {\n      const XMLresults = new Array(...XMLResponse.getElementsByTagName('work'))\n      \n      const searchResults = XMLresults.map(result => this.XMLToJson(result))      \n      console.log(searchResults);\n      \n      this.setState({\n        fetchingData: false\n        },\n        () => {\n          this.props.setResults(searchResults)          \n      })\n    }\n  }\n\n  // function to convert XML document to JSON format\n  XMLToJson = XML => {\n    const allNodes = new Array(...XML.children)\n    const jsonResult = {}\n    allNodes.forEach(node => {\n      if (node.children.length) {\n        jsonResult[node.nodeName] = this.XMLToJson(node)\n      }\n      else {\n        jsonResult[node.nodeName] = node.innerHTML\n      }\n    })\n    return jsonResult\n  }\n\n  render()  {\n    return (\n      <div>\n        <div className=\"form-group row\">\n          <input\n            className=\"mr-1 col-sm-9 form-control\"\n            type=\"text\"\n            placeholder=\"Search Books by title or author\"\n            name=\"searchText\"\n            onChange={this.onTextChange}\n            value={this.state.searchText}\n          />\n          <button\n            className=\"col-sm-2 btn btn-primary\"\n            onClick={this.onButtonClick}\n          >\n            Search\n          </button>\n        </div>\n\n        {this.state.fetchingData ? (\n          <p className=\"lead text-center\">{'loading...'}</p>\n        ) : (\n          (this.state.error && (\n            <p className=\"text-danger\">{this.state.error}</p>\n          )) || (\n            <Results\n              books={this.props.results}\n              expandBook={this.props.expandBook}\n            />\n          )\n        )}\n      </div>\n    )\n  }\n}\n\nSearch.propTypes = {\n  results: PropTypes.array,\n  setResults: PropTypes.func,\n  expandBook: PropTypes.func\n}\n\nexport default Search\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst AuthorInfo = ({ authors }) => {\n  return (\n    <p>\n    By:{\" \"}\n        {authors.map((author, index) => (\n          <span key={ author.id } className=\"font-weight-bold\">\n            {index ? ', ' : ''}\n            <a href={author.link}>\n              {author.name}\n            </a>\n            {author.role ? `(${author.role})` : ''}\n          </span>\n        ))\n        }\n    </p>\n  )\n}\n\nAuthorInfo.propTypes = {\n  authors: PropTypes.array\n}\n\nexport default AuthorInfo\n","import React, { Component } from 'react'\nimport Axios from 'axios'\nimport PropTypes from 'prop-types'\nimport AuthorInfo from './AuthorInfo'\n\nconst apiKey = 'ynuEDG9y5v4bh1ADHBHw'\n\nclass BookInfo extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      searchResults: [],\n      description: 'Fetching description for this book...',\n      error: ''\n    }\n  }\n\n  componentDidMount() {\n    this.getDescription();\n  }\n\n  getDescription = () => {\n    const bookId = this.props.books.best_book.id\n    const requestUri = `https://mysterious-waters-52302.herokuapp.com/https://www.goodreads.com/book/show/${bookId}?key=${apiKey}`\n\n    Axios.get(requestUri)\n         .then(res => {\n           const parser = new DOMParser();\n           const XMLResponse = parser.parseFromString(res.data, 'application/xml')\n           const parseError = XMLResponse.getElementsByTagName('parsererror')\n\n            if (parseError.length) {\n              this.setState({\n                error: 'An error occurred while fetching the data.'\n              })\n            }\n            else {\n              let description = XMLResponse.getElementsByTagName('description')[0].innerHTML\n              description = description.replace('<![CDATA[', '').replace(']]>', '')\n\n              if (!description) {\n                description = \"No description found.\"\n              }\n              this.setState({ description })\n\n              let XMLresults = XMLResponse.getElementsByTagName('authors')[0].innerHTML\n              XMLresults = XMLresults.replace(/<!\\[CDATA\\[/g, '').replace(/\\]\\]>/g, '')\n              XMLresults = `<authors>${XMLresults}</authors>`;\n              const XMLResponseNew = parser.parseFromString(XMLresults, 'application/xml')\n              const XMLresultsNew = new Array(...XMLResponseNew.getElementsByTagName('author'))\n              const searchResults = XMLresultsNew.map(result => this.XMLToJson(result))\n              console.log(searchResults);\n              \n              this.setState({ searchResults })\n            }\n         })\n         .catch(error => {\n           this.setState({\n             error: error.toString()\n           })\n         })\n  }\n\n  // function to convert XML document to JSON format\n  XMLToJson = XML => {\n    const allNodes = new Array(...XML.children)\n    const jsonResult = {}\n    allNodes.forEach(node => {\n      if (node.children.length) {\n        jsonResult[node.nodeName] = this.XMLToJson(node)\n      }\n      else {\n        jsonResult[node.nodeName] = node.innerHTML\n      }\n    })\n    return jsonResult\n  }\n\n  render() {\n    const { books } = this.props\n\n    return (\n      <div className=\"row col-lg-12\">\n\n        <div className=\"col-lg-2 col-sm-4\">\n          <img\n            src={books.best_book.image_url}\n            height=\"200px\"\n            width=\"130px\"\n            alt=\"book cover\"\n          />\n        </div>\n        <div className=\"col-lg-10 col-sm-8\">\n          <h3 className=\"mb-3\">{books.best_book.title}</h3>\n\n          <AuthorInfo authors={this.state.searchResults} />\n\n          <p>Avg. Rating: {books.average_rating}</p>\n\n          {(this.state.error && (\n            <p className=\"text-danger\">{this.state.error}</p>\n          )) || (\n            <p dangerouslySetInnerHTML={{ __html: this.state.description }}></p>\n          )}\n        </div>\n        <div>\n          <p>\n            Published Date:{\" \"}\n            {`${books.original_publication_day}/${books.original_publication_month}/${books.original_publication_year}`}.{\" \"}\n          </p>\n          <button className=\"btn btn-primary\" onClick={this.props.collapseBook}>\n            {'Go Back'}\n          </button>\n        </div>\n      </div>\n    )\n  }\n}\n\nBookInfo.propTypes = {\n  books: PropTypes.object,\n  collapseBook: PropTypes.func\n}\n\nexport default BookInfo\n","import React, { Component } from 'react';\nimport './App.css';\nimport Search from './components/Search';\nimport BookInfo from './components/BookInfo';\n\nclass App extends Component {\n  state = {\n    results: [],\n    expandedBook: null\n  }\n  \n\n  setResults = results => {\n    this.setState({ results });\n  }\n\n  collapseBook = () => {\n    this.setState({\n      expandedBook: null\n    })\n  }\n\n  expandBook = expandedBook => {\n    this.setState({ expandedBook })\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"header clearfix mt-5\">\n          <h3 className=\"text-muted\">Goodreads Book Search </h3>\n        </div>\n        <div className=\"jumbotron\">\n\n          {this.state.expandedBook ? (\n            <BookInfo\n              books={this.state.expandedBook}\n              collapseBook={this.collapseBook}\n            />\n          ) : (\n            <Search\n              results={this.state.results}\n              setResults={this.setResults}\n              expandBook={this.expandBook}\n            />\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}